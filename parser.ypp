%{
    #include <iostream>
    #include "output.hpp"
    using namespace std;
    #define YYSTYPE int
    int yylex();
    extern int yylineno;
    void yyerror(const char* err);
%}

%nonassoc VOID;
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc CONST;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc LBRACE;
%nonassoc RBRACE;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%left LPAREN;
%left RPAREN;
%right NOT;
%left  MULT
%left  DIV
%left  PLUS
%left  MINUS
%nonassoc RELOPNONASSOC
%left RELOPLEFT
%left AND;
%left OR;
%right IF;
%right ELSE;
%right ASSIGN;
%%
program: funcs{output::printProductionRule(1);};

funcs: /*epsilon*/{output::printProductionRule(2);};|
        funcDecl funcs {output::printProductionRule(3);};

funcDecl: retType ID LPAREN formals RPAREN LBRACE statements RBRACE{output::printProductionRule(4);};

retType: type{output::printProductionRule(5);};
        |VOID{output::printProductionRule(6);};

formals: /*epsilon*/{output::printProductionRule(7);};
	|formalsList{output::printProductionRule(8);};

formalsList: formalDecl{output::printProductionRule(9);};
	|formalDecl COMMA formalsList{output::printProductionRule(10);};

formalDecl: typeAnnotation type ID{output::printProductionRule(11);};//TODO: maybe there is a problem with typeAnnotation?

statements: statement{output::printProductionRule(12);}
	|statements statement{output::printProductionRule(13);};

//TODO need to be treated in case of "dungling else" like "statement: IF LPAREN exp RPAREN IF LPAREN exp RPAREN statement ELSE statement;"
statement: OpenStatement
	|ClosedStatement;

OpenStatement: IF LPAREN exp RPAREN statement{output::printProductionRule(21);}
		|IF LPAREN exp RPAREN ClosedStatement ELSE OpenStatement{output::printProductionRule(22);}
		|WHILE LPAREN exp RPAREN OpenStatement{output::printProductionRule(23);};
ClosedStatement:SimpleStatement
		|IF LPAREN exp RPAREN ClosedStatement ELSE ClosedStatement
		|WHILE LPAREN exp RPAREN ClosedStatement;

SimpleStatement: LBRACE statements RBRACE{output::printProductionRule(14);}
	|typeAnnotation type ID SC{output::printProductionRule(15);}
	|typeAnnotation type ID ASSIGN exp SC{output::printProductionRule(16);}
	|ID ASSIGN exp SC{output::printProductionRule(17);}
	|call SC{output::printProductionRule(18);}
	|RETURN SC{output::printProductionRule(19);}
	|RETURN exp SC{output::printProductionRule(20);}
	|BREAK SC{output::printProductionRule(24);}
	|CONTINUE SC{output::printProductionRule(25);};

call: ID LPAREN expList RPAREN{output::printProductionRule(26);};
	|ID LPAREN RPAREN{output::printProductionRule(27);};

expList: exp{output::printProductionRule(28);};
	|exp COMMA expList{output::printProductionRule(29);};

type: INT{output::printProductionRule(30);};
	|BYTE{output::printProductionRule(31);};
	|BOOL{output::printProductionRule(32);};

typeAnnotation: /*epsilon*/{output::printProductionRule(33);};
		|CONST{output::printProductionRule(34);};


exp: LPAREN exp RPAREN{output::printProductionRule(35);};
	|exp MULT exp{output::printProductionRule(36);};
	|exp DIV exp{output::printProductionRule(36);};
	|exp PLUS exp{output::printProductionRule(36);};
	|exp MINUS exp{output::printProductionRule(36);};
	|ID{output::printProductionRule(37);};
	|call{output::printProductionRule(38);};
	|NUM{output::printProductionRule(39);};
	|NUM B{output::printProductionRule(40);};
	|STRING{output::printProductionRule(41);};
	|TRUE{output::printProductionRule(42);};
	|FALSE{output::printProductionRule(43);};
	|NOT exp{output::printProductionRule(44);};
	|exp AND exp{output::printProductionRule(45);};
	|exp OR exp{output::printProductionRule(46);};
	|exp RELOPNONASSOC exp{output::printProductionRule(47);};
	|exp RELOPLEFT exp{output::printProductionRule(47);};
	|LPAREN typeAnnotation type RPAREN exp{output::printProductionRule(48);};


%%

void yyerror (const char* err) {
    output::errorSyn(yylineno);
    exit(0);
}
int main() {
    return yyparse();
}